.TH BABEL 8
.SH NAME
babel \- ad-hoc network routing daemon
.SH SYNOPSIS
.B babel
.IR option ...
[
.B \-\-
]
.I address
.IR interface ...
.SH DESCRIPTION
Babel is a loop-avoiding distance-vector routing protocol roughly
based on DSDV and AODV, but with provisions for link cost estimation
and injection of external routes.

While it is optimised for wireless mesh networks, Babel will also work
efficiently on wired networks.  In the worst case, it will generate
roughly double the amount of traffic that RIPng would generate, while
never counting to infinity.
.SH OPTIONS
.TP
.BI \-m " multicast-address"
Specify the link-local multicast address to be used by the protocol.
.TP
.BI \-p " port"
Specify the UDP port number to be used by the protocol.
.TP
.BI \-S " state-file"
Set the name of the file used for preserving long-term information
between invocations of the
.B babel
daemon.  If this file is deleted, the daemon will run in passive mode
for 3 minutes when it is next started (see
.B -P
below), and other hosts might initially ignore it.  The default is
.BR /var/lib/babel-state .
.TP
.BI \-h " hello-interval"
Specify the interval in seconds at which scheduled hello packets are
sent on wireless interfaces.  The default is 8.
.TP
.BI \-H " wired-hello-interval"
Specify the interval in seconds at which scheduled hello packets are
sent on wired interfaces.  The default is 30.
.TP
.BI \-i " idle-hello-interval"
Enable detection of idle networks (networks on which we haven't
accepted a hello packet in 5 minutes) and specify the interval in
seconds at which scheduled hello packets are sent on idle interfaces.
This functonality is experimental, don't use it unless you know what
you are doing.
.TP
.BI \-u " update-interval"
Specify the interval in seconds at which scheduled routing table dumps
are made on all interfaces.  The default is either the wired hello
interval, or 70, whichever is less.  Babel uses triggered updates in
addition to scheduled updates, so this value may be set to a fairly
large value.
.TP
.BI \-k " kernel-metric"
Specify a value that will be added to routes' metrics before
installing them in the kernel; this is useful when a single node
participates in multiple routing protocols.  The default is 0.
.TP
.B \-s
Do not perform split-horizon processing on wired interfaces.
Split-horizon is never performed on wireless interfaces.
.TP
.B \-b
Use a single broadcast message for reverse reachability information on
wired interfaces rather then messages specific to each peer.  This
will slightly reduce traffic on interfaces with many neighbours, but
will disable detection of asymmetric links, and is therefore not
recommended.  Messages specific to each peer are always sent on
wireless interfaces.
.TP
.BI \-c " cost"
Add
.I cost
to the metrics of advertised routes.  This is useful for example when
we are low on battery and hardly eager to forward packets.
.TP
.B \-P
Run in parasitic (passive) mode.  The daemon will not announce any
routes except to itself.
.TP
.BI \-d " level"
Debug level.  A value of 1 requests a routing table dump at every
iteration through the daemon's main loop.  A value of 2 additionally
requests tracing every message sent or received.  The default is 0.
.TP
.BI \-x " network cost"
Redistribute a route for the given network or host with the given
cost.
.I Network
should be either the string
.BR default ,
or a network specification in CIDR notation
.IB prefix / length.
If
.I length
is omitted, it defaults to 128 (a host route).
.I Cost
should either be a 16-bit unsigned integer, or the string
.B infinity
which specifies a blackhole route.  Babel itself uses a cost of 256
for a lossless wireless link, and a cost of 128 for a functioning
wired link.
.TP
.BI \-X " network cost"
Advertise a route for the given network or host with the given cost,
even if it is not currently installed.  Use of this option is
discouraged, as it can cause persistent routing loops.
.TP
.I address
The IPv6 address that the node should advertise for itself.
(Additional addresses can be advertised as external routes with a cost
of 0.)
.TP
.IR interface ...
The list of interfaces on which the protocol should operate.
.SH EXAMPLES
Let
.B $IPv6
be one of your node's IPv6 addresses, and suppose that
.B eth1
is a wireless interface.  You can participate in a Babel mesh network
by simply running
.IP
# babel $IPv6 eth1
.PP

In order to gateway between multiple interfaces, just list them all on
the command line:
.IP
# babel $IPv6 eth1 eth0 sit1
.PP
If you wish to be reachable by all of your IPv6 addresses, just inject
them into the routing domain as zero-cost external routes:
.IP
# babel -X $otherIPv6 0 $IPv6 eth1
.PP
On an access point, you'll probably want to redistribute the default route:
.IP
# babel -x ::/0 256 $IPv6 eth1
.PP
.SH WIRED INTERFACES
By default, the daemon optimises traffic on wired interfaces by
sending fewer scheduled hello messages and performing split-horizon
processing.  These optimisations can be disabled by using the
.B -H
and
.B -s
options respectively.

By default, detection of asymmetric links is performed on wired
interfaces just like on wireless ones.  By specifying the
.B -b
option, reverse reachability information will not be sent on wired
links, which will disable detection of asymmetric links for all wired
peers, at the benefit of a very slight decrease in traffic.  This is
not recommended.

No link cost estimation is ever performed on wired interfaces: a wired
adjacency is assumed to be up if at least one of the last three hello
messages has been received, and down otherwise.
.SH FILES
.TP
.B /var/lib/babel-state
The default location of the file storing long-term state.
.SH SIGNALS
.TP
.B SIGUSR1
Dump Babel's routing tables to standard output.
.SH SECURITY
Babel is a completely insecure protocol: any attacker able to inject
IP packets with a link-local source address can disrupt the protocol's
operation.  This is no different from unsecured neighbour discovery
(ARP in IPv4).

Since Babel uses link-local addresses only, there is no need to update
firewalls to allow forwarding of Babel protocol packets.  If filtering
is done on a host, UDP datagrams to the protocol port should be
allowed.  As Babel uses unicast packets in some cases, it is not
enough to just allow packets destined to Babel's multicast address.
.SH BUGS
Plenty.  This is experimental software, run at your own risk.
.SH SEE ALSO
.BR routed (8),
.BR route6d (8),
.BR zebra (8),
.BR ahcpd (8).
.SH AUTHOR
Juliusz Chroboczek.
